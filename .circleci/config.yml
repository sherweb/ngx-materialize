version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8-browsers
    steps:
      # Checkout the code from the branch into the working_directory
      - checkout
      # Restore lib dependencies from cache
      - restore_cache:
          key: lib-dependency-cache-{{ checksum "./lib/yarn.lock" }}
      # Install lib dependencies
      - run:
          name: Install lib dependencies
          command: cd lib && yarn install --frozen-lockfile --no-progress && cd ..
      # Cache lib dependencies if they don't exist
      - save_cache:
          key: lib-dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ./lib/node_modules
      # Test the source code
      - run:
          name: Test
          command: yarn test --watch=false --code-coverage --no-progress
      - store_artifacts:
          path: test-results.xml
          prefix: tests
      - store_artifacts:
          path: coverage
          prefix: coverage
      # Lint the source code
      - run:
          name: Lint
          command: yarn lint:ci --formatters-dir node_modules/tslint-junit-formatter/formatters --format junit -o tslint.xml
      - store_artifacts:
          path: tslint.xml
          prefix: lint
      # Build the source code
      - run:
          name: Build
          command: yarn build:lib
  deploy:
    docker:
      - image: circleci/node:8-browsers
    steps:
      # Checkout the code from the branch into the working_directory
      - checkout
      # Restore demo dependencies from cache
      - restore_cache:
          key: demo-dependency-cache-{{ checksum "./yarn.lock" }}
      # Install demo dependencies
      - run:
          name: Install demo dependencies
          command: yarn install --frozen-lockfile --no-progress
      # Cache local dependencies if they don't exist
      - save_cache:
          key: demo-dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ./node_modules
      # Build demo
      - run:
          name: Build
          command: yarn gh-pages:build
      # Deploy demo to Github Pages
      - run:
          name: Deploy to gh-pages
          command: yarn gh-pages:deploy

workflows:
  version: 2
  build_and_deploy:
    jobs:
      # Build for all branches other than gh-pages and for all tags
      - build:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: gh-pages
      # Deploy for tags marked by a version number only on master branch
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              only: master
